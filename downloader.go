package zipfetcher

import (
	"fmt"
	"github.com/antchfx/htmlquery"
	"github.com/itchyny/timefmt-go"
	"golang.org/x/net/html"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

type Downloader struct {
	baseURL        string
	pageURI        string
	pageData       *html.Node
	PageUpdateDate time.Time
	XlsPath        string
	xlsDownloadURI string
}

// CreateDownloader is Downloader constructor
func CreateDownloader() *Downloader {
	return &Downloader{
		baseURL: "https://postalpro.usps.com",
		pageURI: "/ZIP_Locale_Detail",
	}
}

// get the source page html
func (z *Downloader) parseSourcePage() error {
	doc, err := htmlquery.LoadURL(z.baseURL + z.pageURI)
	if err != nil {
		return fmt.Errorf("cannot get the source page: %s", err.Error())
	}
	z.pageData = doc

	err = z.parseDownloadLink()
	if err != nil {
		return err
	}
	return z.parseLastUpdateDate()
}

// scratch autogenerated link for download the xls from the source page
func (z *Downloader) parseDownloadLink() error {
	list := htmlquery.Find(z.pageData, "//a[@class='btn btn-outline-primary mt-1']")
	if len(list) == 0 {
		return fmt.Errorf("failed to get xls download link")
	}
	z.xlsDownloadURI = htmlquery.SelectAttr(list[0], "href")
	return nil
}

// scratch last update date from source page
func (z *Downloader) parseLastUpdateDate() error {
	list := htmlquery.Find(z.pageData, "//div[@class='form-item field field--name-field-description "+
		"field--type-text-with-summary field--label-above']//p//text()")
	if len(list) == 0 {
		return fmt.Errorf("failed to get last update date")
	}

	date := strings.TrimPrefix(list[0].Data, "updated ")
	t, err := timefmt.Parse(date, "%m/%d/%Y")
	if err != nil {
		return fmt.Errorf("failed to get last update date")
	}

	z.PageUpdateDate = t
	return nil
}

// download the xls in temporary file
func (z *Downloader) downloadXls() error {
	out, _ := os.CreateTemp("", "zips")
	z.XlsPath = out.Name()

	resp, err := http.Get(z.baseURL + z.xlsDownloadURI)
	if err != nil {
		return fmt.Errorf("fail dowmload xls from %s: %s", z.baseURL+z.xlsDownloadURI, err.Error())
	}
	defer resp.Body.Close()

	_, err = io.Copy(out, resp.Body)
	if err != nil {
		return fmt.Errorf("fail dowmload xls from %s: %s", z.baseURL+z.xlsDownloadURI, err.Error())
	}
	return nil
}
